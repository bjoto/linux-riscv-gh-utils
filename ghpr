#!/bin/env python3

from github import Github
from github import Auth
import argparse
import re
import sys
import os

def print_pr(pr, args):
    print(f"title: {pr.title}")
    print(f"url: https://github.com/linux-riscv/linux-riscv/pull/{pr.number}")
    l = [i.name for i in pr.labels]
    l.sort()
    print(f"labels: {' '.join(str(i) for i in l)}")
    if args.show_body:
        msg = pr.body.splitlines()
        for i in msg:
            print(f"body: {i}")

    if args.show_last_messages:
        comments = pr.get_issue_comments();
        show = (args.show_last_messages
                if args.show_last_messages < comments.totalCount
                else comments.totalCount)
        for i in range(show):
            msg = comments[comments.totalCount-1-i].body.splitlines()
            for m in msg:
                print(f"msg#{comments.totalCount-1-i}: {m}")

    if args.show_suite:
        CI_APP = 15368
        commit = r.get_commit(pr.head.sha)
        suites = commit.get_check_suites()
        conclusion = "NONE"
        status = "NONE"
        for s in suites:
            if s.app.id == CI_APP:
                conclusion = s.conclusion
                status = s.status
                break

        print(f"suite_status: {status}")
        print(f"suite_conclusion: {conclusion}")


def parse_args():
    parser = argparse.ArgumentParser(description=''' Manage
    linux-riscv PRs. The tool expects that the environment variable
    GH_TOKEN contains the Github token.
    ''')

    parser.add_argument(
        "--pr", type=int, action="append", help="Only show PR NUMBER (can be passed multiple times)"
    )

    parser.add_argument(
        "--show-body", action="store_true", help="Show PR body"
    )

    parser.add_argument(
        "--show-suite", action="store_true", help="Show suite details"
    )

    parser.add_argument(
        "--show-last-messages", nargs='?', const=1, type=int, metavar="N",
        help="Show last N messages (default 1)"
    )

    return parser.parse_args()

args = parse_args()

token = os.getenv('GH_TOKEN')
auth = Auth.Token(token)
g = Github(auth=auth)
r = g.get_organization("linux-riscv").get_repo("linux-riscv")

if args.pr:
    prs = []
    for i in args.pr:
        pr = r.get_pull(i)
        prs.append(pr)
else:
    prs = r.get_pulls(state="open")

for pr in prs:
    print_pr(pr, args)

g.close()
